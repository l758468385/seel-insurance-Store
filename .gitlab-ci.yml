include: ".gitlab-ci-template.yml"
#模版使用：
# 需要流水文件里定义 variables （注意 "ENABLED_STAGING" 决定CI变量中是否要配 "STAGING_" 开头的变量）
# 需要配置CI变量： 
#   【文件变量】编译项目时导入的环境变量（代码里用import.meta.env读取）:DEVELOP_ENV/STAGING_ENV/PRODUCTION_ENV
#   【字符串变量】当前项目的仓库修改令牌（用来CI打版本标签的）:GITLAB_USER/GITLAB_TOKEN
#   【字符串变量】上传产物到存储（部署时上传到存储）:UPLOAD_REGION/UPLOAD_BUCKET/UPLOAD_ACCESS_KEY_ID/UPLOAD_ACCESS_KEY_SECRET/UPLOAD_TARGET_URL
#                  UPLOAD_TARGET_URL: 访问资源的URL基础路径，结尾没斜杠，如"https://vmi.eshoptechhub.com"
#   【字符串变量】发布自定义代码（开发环境）:DEVELOP_CUSTOM_CODE_API/DEVELOP_CUSTOM_CODE_KEY
#   【字符串变量】发布自定义代码（预发环境）:STAGING_CUSTOM_CODE_API/STAGING_CUSTOM_CODE_KEY
#   【字符串变量】发布自定义代码（生产环境）:PRODUCTION_CUSTOM_CODE_API/PRODUCTION_CUSTOM_CODE_KEY
# 需要使用 yarn 作为包管理器（用yarn.lock作为包缓存依赖）
# 需要 package.json -> "scripts" 里定义 "build:changelog" 脚本，会在打版本时执行，可以用来生成变更日志，修改内容会被提交
#     如不需要可以："build:changelog": "echo \"\""
# 有两种流水："feature/"开头的特性分支，只能发布开发环境；"v"开头的tag，可以发布预发和生产环境

variables:
  # 是否启用预发环境（会多一套预发环境的job，包含了：构建、部署、发布自定代码。同时决定是否配置STAGING_开头的CI变量）
  ENABLED_STAGING: "false"
  # 需要上传的本地目录（将整个目录内容上传，斜杆结尾）
  UPLOAD_LOCAL_DIR: "./dist/"
  # 产物中的入口js（相对版本产物根目录，无斜杆开头。需要符合url路径语法）
  UPLOAD_ENTRY_JS: "index.js"
  # 上传目标目录（相对于桶根目录，开头和结尾需要斜杠，如果是在桶根目录则"/"。需要符合url路径语法，即会用在上传存储的路径拼接，也会用在CDN访问的url拼接）
  UPLOAD_TARGET_DIR: "/"
  # 上传前执行的命令
  UPLOAD_BEFORE_CMD: "echo \"准备上传\""
  # 自定义代码的模版文件，可用关键字（读取时会被实际内容替换）： ${entryJsUrl} ${jsIntegrity}
  CUSTOM_CODE_TEMPLATE: "./scripts/custom-code-template.html"

